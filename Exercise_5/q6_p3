#building on ex6 p3
import random

class WordGame:
    def __init__(self, rounds: int):
        self.wins1 = 0
        self.wins2 = 0
        self.rounds = rounds

    def round_winner(self, player1_word: str, player2_word: str):
        
        # random winner (original behavior)
        return random.randint(1, 2)

    def play(self):
        print("Word game:")
        for i in range(1, self.rounds + 1):
            print(f"round {i}")
            answer1 = input("player1: ")
            answer2 = input("player2: ")
            winner = self.round_winner(answer1, answer2)

            if winner == 1:
                self.wins1 += 1
                print("player 1 won")
            elif winner == 2:
                self.wins2 += 1
                print("player 2 won")

        print("game over, wins:")
        print(f"player 1: {self.wins1}")
        print(f"player 2: {self.wins2}")


class MostVowels(WordGame):
    def __init__(self, rounds: int):
        super().__init__(rounds)

    def count_vowels(self, word: str):
        vowels = "aeiouAEIOU"
        return sum(1 for char in word if char in vowels)

    def round_winner(self, player1_word: str, player2_word: str):
        # determine the winner based on vowel count
        player1_vowels = self.count_vowels(player1_word)
        player2_vowels = self.count_vowels(player2_word)

        if player1_vowels > player2_vowels:
            return 1
        elif player2_vowels > player1_vowels:
            return 2
        else:
            return 0 # tie


p = MostVowels(3)
p.play()
#p3 starts
class RockPaperScissorsLizardSpock(WordGame):
    def __init__(self, rounds: int):
        super().__init__(rounds)

    def round_winner(self, player1_word: str, player2_word: str):
        # valid choices
        choices = {"rock", "paper", "scissors", "lizard", "spock"}

        # winning conditions
        wins_against = {
            "scissors": {"paper", "lizard"},
            "paper": {"rock", "spock"},
            "rock": {"scissors", "lizard"},
            "lizard": {"spock", "paper"},
            "spock": {"scissors", "rock"}
        }

        # check for invalid inputs
        if player1_word not in choices and player2_word not in choices:
            return 0  # Tie if both are invalid
        elif player1_word not in choices:
            return 2  # Player 1 loses
        elif player2_word not in choices:
            return 1  # Player 2 loses

        # determine winner based on rules
        if player2_word in wins_against[player1_word]:
            return 1
        elif player1_word in wins_against[player2_word]:
            return 2
        else:
            return 0  # tie


p = RockPaperScissorsLizardSpock(3)
p.play()
