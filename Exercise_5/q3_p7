class Item:
    def __init__(self, name: str, weight: int):
        self.__name = name
        self.__weight = weight

    def name(self):
        return self.__name

    def weight(self):
        return self.__weight

    def __str__(self):
        return f"{self.__name} ({self.__weight} g)"

class Suitcase:
    def __init__(self, max_weight: int):
        self.max_weight = max_weight  # maximum weight capacity
        self.items = []  # list to store the items in the suitcase

    def add_item(self, item: Item):
        # add the item only if the total weight does not exceed the max weight
        if self.weight() + item.weight() <= self.max_weight:
            self.items.append(item)
        else:
            print(f"Cannot add {item.name()}! Exceeds weight limit.")

    def print_items(self):
        for item in self.items:
            print(item)

    def weight(self):
        return sum(item.weight() for item in self.items)

    def heaviest_item(self):
        if not self.items:
            return None  # return None if the suitcase is empty
        # return the item with the maximum weight
        return max(self.items, key=lambda item: item.weight())



book = Item("ABC Book", 200)
phone = Item("Nokia 3210", 100)
brick = Item("Brick", 400)

suitcase = Suitcase(1000)
suitcase.add_item(book)
suitcase.add_item(phone)
suitcase.add_item(brick)

heaviest = suitcase.heaviest_item()
print(f"The heaviest item: {heaviest}")
class CargoHold:
    def __init__(self, max_weight_kg: float):
        self.max_weight_kg = max_weight_kg  # max weight capacity in kilograms
        self.suitcases = []  # list to store suitcases in the cargo hold

    def add_suitcase(self, suitcase: Suitcase):
        # check if adding this suitcase would exceed the weight capacity
        if self.total_weight() + (suitcase.weight() / 1000) <= self.max_weight_kg:
            self.suitcases.append(suitcase)
        else:
            print("Cannot add suitcase! Exceeds weight limit.")

    def total_weight(self):
        # calculate total weight in grams by summing the weight of all suitcases
        return sum(suitcase.weight() for suitcase in self.suitcases)

    def __str__(self):
        # calculate remaining weight in kg and return the formatted string
        remaining_space_kg = self.max_weight_kg - (self.total_weight() / 1000)
        suitcase_count = len(self.suitcases)
        if suitcase_count == 1:
            return f"1 suitcase, space for {remaining_space_kg:.1f} kg"
        else:
            return f"{suitcase_count} suitcases, space for {remaining_space_kg:.1f} kg"

    def print_items(self):
        # print out all items in all suitcases
        for suitcase in self.suitcases:
            suitcase.print_items()

class Suitcase:
    def __init__(self, max_weight: int):
        self.max_weight = max_weight  # maximum weight capacity of the suitcase
        self.items = []  # list to store items in the suitcase

    def add_item(self, item: Item):
        # add the item only if the total weight does not exceed the max weight
        if self.weight() + item.weight() <= self.max_weight:
            self.items.append(item)
        else:
            print(f"Cannot add {item.name()}! Exceeds weight limit.")

    def weight(self):
        return sum(item.weight() for item in self.items)

    def print_items(self):
        # print out all items in the suitcase
        for item in self.items:
            print(item)

class Item:
    def __init__(self, name: str, weight: int):
        self.__name = name
        self.__weight = weight

    def name(self):
        return self.__name

    def weight(self):
        return self.__weight

    def __str__(self):
        return f"{self.__name} ({self.__weight} g)"



book = Item("ABC Book", 200)
phone = Item("Nokia 3210", 100)
brick = Item("Brick", 400)

# create two suitcases and add items
adas_suitcase = Suitcase(1000)  # 1000 grams max weight
adas_suitcase.add_item(book)
adas_suitcase.add_item(phone)

peters_suitcase = Suitcase(1000)
peters_suitcase.add_item(brick)

# create a cargo hold and add suitcases
cargo_hold = CargoHold(100)  # Max weight in kg
cargo_hold.add_suitcase(adas_suitcase)
cargo_hold.add_suitcase(peters_suitcase)

print("The suitcases in the cargo hold contain the following items:")
cargo_hold.print_items()
