class LibraryItem:
    def __init__(self, title, author, publication_year, item_id):
        self.title = title
        self.author = author
        self.publication_year = publication_year
        self.item_id = item_id
        self.checked_out = False

    def display_info(self):
        print(f"Title: {self.title}")
        print(f"Author: {self.author}")
        print(f"Publication Year: {self.publication_year}")
        print(f"Item ID: {self.item_id}")
        print(f"Status: {'Checked Out' if self.checked_out else 'Available'}")

    def check_out(self):
        if self.checked_out:
            print(f"{self.title} is already checked out.")
        else:
            self.checked_out = True
            print(f"{self.title} has been checked out.")

    def return_item(self):
        if not self.checked_out:
            print(f"{self.title} is already available.")
        else:
            self.checked_out = False
            print(f"{self.title} has been returned.")


class Book(LibraryItem):
    def __init__(self, title, author, publication_year, item_id, isbn, genre):
        super().__init__(title, author, publication_year, item_id)
        self.isbn = isbn
        self.genre = genre

    def display_info(self):
        super().display_info()
        print(f"ISBN: {self.isbn}")
        print(f"Genre: {self.genre}")


class DVD(LibraryItem):
    def __init__(self, title, director, publication_year, item_id, duration, rating):
        super().__init__(title, director, publication_year, item_id)
        self.duration = duration
        self.rating = rating

    def display_info(self):
        super().display_info()
        print(f"Duration: {self.duration} minutes")
        print(f"Rating: {self.rating}")


class CD(LibraryItem):
    def __init__(self, title, artist, publication_year, item_id, number_of_tracks):
        super().__init__(title, artist, publication_year, item_id)
        self.number_of_tracks = number_of_tracks

    def display_info(self):
        super().display_info()
        print(f"Number of Tracks: {self.number_of_tracks}")


class Magazine(LibraryItem):
    def __init__(self, title, publisher, publication_year, item_id, issue_number):
        super().__init__(title, publisher, publication_year, item_id)
        self.issue_number = issue_number

    def display_info(self):
        super().display_info()
        print(f"Issue Number: {self.issue_number}")


class EBook(LibraryItem):
    def __init__(self, title, author, publication_year, item_id, file_format):
        super().__init__(title, author, publication_year, item_id)
        self.file_format = file_format

    def display_info(self):
        super().display_info()
        print(f"File Format: {self.file_format}")


class Audiobook(LibraryItem):
    def __init__(self, title, author, publication_year, item_id, narrator):
        super().__init__(title, author, publication_year, item_id)
        self.narrator = narrator

    def display_info(self):
        super().display_info()
        print(f"Narrator: {self.narrator}")


class LibraryCatalog:
    def __init__(self):
        self.items = []

    def add_item(self, item):
        self.items.append(item)
        print(f"Added {item.title} to the catalog.")

    def remove_item(self, item_id):
        for item in self.items:
            if item.item_id == item_id:
                self.items.remove(item)
                print(f"Removed {item.title} from the catalog.")
                return
        print(f"Item with ID {item_id} not found.")

    def search_item(self, title):
        found_items = [item for item in self.items if title.lower() in item.title.lower()]
        if found_items:
            for item in found_items:
                item.display_info()
        else:
            print(f"No items found with title containing '{title}'.")

    def borrow_item(self, item_id):
        for item in self.items:
            if item.item_id == item_id:
                item.check_out()
                return
        print(f"Item with ID {item_id} not found.")

    def return_item(self, item_id):
        for item in self.items:
            if item.item_id == item_id:
                item.return_item()
                return
        print(f"Item with ID {item_id} not found.")


# Testing the Library Catalog System
if __name__ == "__main__":
    # Create instances of different library items
    book1 = Book("The Great Gatsby", "F. Scott Fitzgerald", 1925, "B001", "9780743273565", "Fiction")
    dvd1 = DVD("Inception", "Christopher Nolan", 2010, "D001", 148, "PG-13")
    cd1 = CD("Thriller", "Michael Jackson", 1982, "C001", 9)
    magazine1 = Magazine("National Geographic", "National Geographic Society", 2021, "M001", 123)
    ebook1 = EBook("1984", "George Orwell", 1949, "E001", "PDF")
    audiobook1 = Audiobook("The Hobbit", "J.R.R. Tolkien", 1937, "A001", "Rob Inglis")

    # Create an instance of LibraryCatalog
    catalog = LibraryCatalog()

    # Add items to the catalog
    catalog.add_item(book1)
    catalog.add_item(dvd1)
    catalog.add_item(cd1)
    catalog.add_item(magazine1)
    catalog.add_item(ebook1)
    catalog.add_item(audiobook1)

    # Search for items
    print("\nSearching for 'The':")
    catalog.search_item("The")

    print("\nSearching for 'Inception':")
    catalog.search_item("Inception")

    # Borrow items
    print("\nBorrowing 'The Great Gatsby':")
    catalog.borrow_item("B001")

    print("\nBorrowing 'Inception':")
    catalog.borrow_item("D001")

    # Return items
    print("\nReturning 'The Great Gatsby':")
    catalog.return_item("B001")

    print("\nReturning 'Inception':")
    catalog.return_item("D001")

    # Remove items
    print("\nRemoving 'Thriller':")
    catalog.remove_item("C001")

    # Display updated catalog
    print("\nSearching for all items:")
    catalog.search_item("")